# Generated by Django 5.2.6 on 2025-09-19 11:36

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Email"
                    ),
                ),
                ("first_name", models.CharField(max_length=30, verbose_name="Имя")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
                "db_table": "accounts_user",
            },
        ),
        migrations.CreateModel(
            name="BodyMeasurements",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "waist",
                    models.FloatField(blank=True, help_text="Талия в см", null=True),
                ),
                (
                    "hips",
                    models.FloatField(blank=True, help_text="Бедра в см", null=True),
                ),
                (
                    "chest",
                    models.FloatField(blank=True, help_text="Грудь в см", null=True),
                ),
                (
                    "neck",
                    models.FloatField(blank=True, help_text="Шея в см", null=True),
                ),
                ("bicep_left", models.FloatField(blank=True, null=True)),
                ("bicep_right", models.FloatField(blank=True, null=True)),
                ("thigh_left", models.FloatField(blank=True, null=True)),
                ("thigh_right", models.FloatField(blank=True, null=True)),
                ("date_recorded", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="measurements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_recorded"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "age",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Мужской"), ("F", "Женский")],
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "height",
                    models.FloatField(
                        blank=True,
                        help_text="Рост в см",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(250),
                        ],
                    ),
                ),
                (
                    "current_weight",
                    models.FloatField(
                        blank=True,
                        help_text="Текущий вес в кг",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "target_weight",
                    models.FloatField(
                        blank=True,
                        help_text="Целевой вес в кг",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "goal",
                    models.CharField(
                        choices=[
                            ("lose", "Снижение веса"),
                            ("maintain", "Поддержание веса"),
                            ("gain", "Набор массы"),
                        ],
                        default="lose",
                        max_length=10,
                    ),
                ),
                (
                    "activity_level",
                    models.FloatField(
                        choices=[
                            (1.2, "Минимальная (офис)"),
                            (1.375, "1-3 тренировки/неделя"),
                            (1.55, "3-5 тренировок/неделя"),
                            (1.725, "6-7 тренировок/неделя"),
                            (1.9, "Очень высокая активность"),
                        ],
                        default=1.55,
                    ),
                ),
                (
                    "dietary_preferences",
                    models.TextField(blank=True, help_text="Пищевые предпочтения"),
                ),
                (
                    "allergies",
                    models.TextField(blank=True, help_text="Аллергии через запятую"),
                ),
                (
                    "units",
                    models.CharField(
                        choices=[
                            ("metric", "Метрические (кг/см)"),
                            ("imperial", "Имперские (lb/ft)"),
                        ],
                        default="metric",
                        max_length=10,
                    ),
                ),
                ("daily_steps_goal", models.PositiveIntegerField(default=8000)),
                (
                    "daily_water_goal",
                    models.PositiveIntegerField(
                        default=2000, help_text="Цель по воде в мл"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="userprofile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WeightLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(300),
                        ]
                    ),
                ),
                ("date_recorded", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weight_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_recorded"],
            },
        ),
        migrations.CreateModel(
            name="DailyHabits",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("steps_count", models.PositiveIntegerField(default=0)),
                (
                    "water_intake",
                    models.PositiveIntegerField(
                        default=0, help_text="Потребление воды в мл"
                    ),
                ),
                (
                    "sleep_hours",
                    models.FloatField(blank=True, help_text="Часы сна", null=True),
                ),
                (
                    "energy_level",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "mood_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="daily_habits",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "unique_together": {("user", "date")},
            },
        ),
    ]
